(************** Content-type: application/mathematica **************
                     CreatedBy='Mathematica 5.2'

                    Mathematica-Compatible Notebook

This notebook can be used with any Mathematica-compatible
application, such as Mathematica, MathReader or Publicon. The data
for the notebook starts with the line containing stars above.

To get the notebook into a Mathematica-compatible application, do
one of the following:

* Save the data starting with the line of stars above into a file
  with a name ending in .nb, then open the file inside the
  application;

* Copy the data starting with the line of stars above to the
  clipboard, then use the Paste menu command inside the application.

Data for notebooks contains only printable 7-bit ASCII and can be
sent directly in email or through ftp in text mode.  Newlines can be
CR, LF or CRLF (Unix, Macintosh or MS-DOS style).

NOTE: If you modify the data for this notebook not in a Mathematica-
compatible application, you must delete the line below containing
the word CacheID, otherwise Mathematica-compatible applications may
try to use invalid cache data.

For more information on notebooks and Mathematica-compatible 
applications, contact Wolfram Research:
  web: http://www.wolfram.com
  email: info@wolfram.com
  phone: +1-217-398-0700 (U.S.)

Notebook reader applications are available free of charge from 
Wolfram Research.
*******************************************************************)

(*CacheID: 232*)


(*NotebookFileLineBreakTest
NotebookFileLineBreakTest*)
<<<<<<< .mine
(*NotebookOptionsPosition[     15858,        399]*)
(*NotebookOutlinePosition[     16535,        422]*)
(*  CellTagsIndexPosition[     16491,        418]*)
=======
(*NotebookOptionsPosition[     12435,        320]*)
(*NotebookOutlinePosition[     13115,        343]*)
(*  CellTagsIndexPosition[     13071,        339]*)
>>>>>>> .r96
(*WindowFrame->Normal*)



Notebook[{

Cell[CellGroupData[{
Cell["KnotTheory`KTtoLinKnot`", "Section",
  InitializationCell->True],

Cell["\<\
This file is a subpackage of the KnotTheory` package, whose home is at \
http://katlas.math.toronto.edu/

This package provides a compatibility layer between KnotTheory` and LinKnot`. \
You'll need to separately install LinKnot`, available at \
http://www.mi.sanu.ac.yu/vismath/linknot/.\
\>", "Text",
  InitializationCell->True],

Cell[BoxData[
    \(\(BeginPackage["\<KnotTheory`\>"];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(KnotInput::usage = "\<KnotInput[] opens a window in which you can draw \
a knot or link by hand. Right click and select 'Quit' when you're done. This \
function requires the package LinKnots`, and will only run on Windows \
machines. Sorry!\>"\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(DrawKnot::usage = "\<DrawKnot[K_] draws a knot (or link!) K. This \
function requires the package LinKnots`, and will only run on Windows \
machines. Sorry!\>"\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(LinKnotDirectory::usage = "\<LinKnotDirectory[] contains the path to \
the LinKnot package. It must be set correctly in order for all the (Windows \
only) MathLink components of LinKnot to be usable. It can be overriden by the \
user.\>"\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(Begin["\<`KTtoLinKnot`\>"]\)], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(SetAttributes[SwitchDirectories, HoldAll]\), "\[IndentingNewLine]", 
    \(SwitchDirectories[e_] := 
      Module[{currentDir = Directory[], 
          kbcOnContextPath = MemberQ[$ContextPath, "\<KnotsByComputer`\>"], \ 
          result}, \[IndentingNewLine]SetDirectory[
          LinKnotDirectory[]]; \[IndentingNewLine]If[\(! kbcOnContextPath\), 
          AppendTo[$ContextPath, "\<KnotsByComputer`\>"]]; \
\[IndentingNewLine]result = 
          e; \[IndentingNewLine]If[\(! kbcOnContextPath\), $ContextPath = 
            DeleteCases[$ContextPath, "\<KnotsByComputer`\>"]]; \
\[IndentingNewLine]SetDirectory[
          currentDir]; \[IndentingNewLine]result\[IndentingNewLine]]\)}], \
"Input",
  InitializationCell->True],

Cell[BoxData[{
    \(SetAttributes[EnsurePolyBaseVisible, 
      HoldAll]\), "\[IndentingNewLine]", 
    \(EnsurePolyBaseVisible[e_] := 
      Module[{pbOnContextPath = MemberQ[$ContextPath, "\<PolyBase`\>"], 
          result}, \[IndentingNewLine]If[\(! pbOnContextPath\), 
          AppendTo[$ContextPath, "\<PolyBase`\>"]]; \[IndentingNewLine]result \
= e; \[IndentingNewLine]If[\(! pbOnContextPath\), $ContextPath = 
            DeleteCases[$ContextPath, "\<PolyBase`\>"]]; \
\[IndentingNewLine]result\[IndentingNewLine]]\)}], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(SetAttributes[EnsureKnotLinkBaseVisible, 
      HoldAll]\), "\[IndentingNewLine]", 
    \(EnsureKnotLinkBaseVisible[e_] := 
      Module[{klbOnContextPath = MemberQ[$ContextPath, "\<KnotLinkBase`\>"], 
          result}, \[IndentingNewLine]If[\(! klbOnContextPath\), 
          AppendTo[$ContextPath, "\<KnotLinkBase`\>"]]; \
\[IndentingNewLine]result = 
          e; \[IndentingNewLine]If[\(! klbOnContextPath\), $ContextPath = 
            DeleteCases[$ContextPath, "\<KnotLinkBase`\>"]]; \
\[IndentingNewLine]result\[IndentingNewLine]]\)}], "Input",
  InitializationCell->True],

Cell[BoxData[
    \( (*\ up\ to\ 10\ crossings\ D . \ 
          Rolfsen\ from\ Classical\ notation\ *) \)], "Input",
  InitializationCell->True],

Cell[BoxData[{
    RowBox[{
      RowBox[{\(ConwayNotation[Knot[n_, k_]] /; \((n \[LessEqual] 10)\)\), ":=",
         
        RowBox[{"ConwayNotation", "[", 
          RowBox[{
            StyleBox["LinKnots`fClassicToCon",
              FontColor->RGBColor[1, 0, 0]], "[", \(NameString[Knot[n, k]]\), 
            "]"}], "]"}]}], 
      "\[IndentingNewLine]", \( (*\ 
        up\ to\ 12\ crossings\ form\  ... *) \)}], "\[IndentingNewLine]", 
    RowBox[{\(ConwayNotation[x : Except[_String]]\), ":=", 
      RowBox[{"ConwayNotation", "[", 
        RowBox[{"SwitchDirectories", "[", 
          RowBox[{
            StyleBox["LinKnots`fFindCon",
              FontColor->RGBColor[1, 0, 0]], 
            StyleBox["[",
              FontColor->RGBColor[1, 0, 0]], \(DTtoPData[DTCode[x]]\), "]"}], 
          "]"}], "]"}]}]}], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(checkArgs[s_, t_] := 
      ListQ[s] && VectorQ[t, IntegerQ[#] && # \[GreaterEqual] 0 &] && 
        Tr[t] \[LessEqual] Length[s]\), "\[IndentingNewLine]", 
    \(iteratedTake[s_, t_] /; checkArgs[s, t] := \(iteratedTake[s, t] = 
        With[{w = FoldList[Plus, 0, t]}, 
          Map[Take[s, #] &, 
            Transpose[{Drop[w, \(-1\)] + 1, Rest[w]}]]]\)\)}], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(fContoKTGauss[Ul_String] := 
<<<<<<< .mine
      Module[{mm, nn, ss, vv, 
          i}, \[IndentingNewLine]SwitchDirectories[\[IndentingNewLine]\
EnsurePolyBaseVisible[\[IndentingNewLine]mm = 
              LinKnots`fGaussExtSigns[Ul]; \[IndentingNewLine]nn = 
              LinKnots`fGaussExtSigns[
                StringReplace[
                  Ul, "\<-\>" \[Rule] "\<\>"]];\[IndentingNewLine]]; \
\[IndentingNewLine]nn = 
            Map[Sign, Flatten[mm]]*
              Map[Sign, Flatten[nn]]; \[IndentingNewLine]vv = 
            Table[nn[\([i]\)]*\((\(-1\))\)^i, {i, Length[nn]}]*
              Abs[Flatten[mm]]; \[IndentingNewLine]ss = 
            Map[Length, mm]; \[IndentingNewLine]mm = 
            If[MemberQ[ss, 0], {vv}, 
              iteratedTake[vv, ss]]; \[IndentingNewLine]GaussCode @@ 
            mm\[IndentingNewLine]]\[IndentingNewLine]]\)], "Input",
=======
      Module[{mm, nn, ss, vv, i}, \[IndentingNewLine]mm = 
          LinKnots`fGaussExtSigns[Ul]; \[IndentingNewLine]nn = 
          LinKnots`fGaussExtSigns[
            StringReplace[
              Ul, "\<-\>" \[Rule] "\<\>"]]; \[IndentingNewLine]nn = 
          Map[Sign, Flatten[mm]]*
            Map[Sign, Flatten[nn]]; \[IndentingNewLine]vv = 
          Table[nn[\([i]\)]*\((\(-1\))\)^i, {i, Length[nn]}]*
            Abs[Flatten[mm]]; \[IndentingNewLine]ss = 
          Map[Length, mm]; \[IndentingNewLine]mm = 
          If[MemberQ[ss, 0], {vv}, 
            iteratedTake[vv, ss]]; \[IndentingNewLine]GaussCode @@ 
          If[Length[mm] \[Equal] 1, 
            mm\[LeftDoubleBracket]1\[RightDoubleBracket], 
            mm]\[IndentingNewLine]]\)], "Input",
>>>>>>> .r96
  InitializationCell->True],

Cell[BoxData[
    \(PD[cn_ConwayNotation] := PD[GaussCode[cn]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(InstallLinKnots::failed = "\<The function \"`1`\" requires the LinKnot \
package, which is not distributed as part of KnotTheory. I couldn't seem to \
load it; try downloading it from http://www.mi.sanu.ac.yu/vismath/linknot/, \
and adding the appropriate directory to the $Path.\>"\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(InstallLinKnots[symbol_] := 
      Module[{oldContextPath = $ContextPath}, \[IndentingNewLine] (*Try\ to\ \
load\ LinKnots`*) \[IndentingNewLine]Needs["\<LinKnots`\>"]; \
\[IndentingNewLine] (*If\ it\ failed, \ 
          it\ won' 
            t\ be\ on\ the\ $ContextPath . \ 
              Try\ to\ give\ a\ useful\ error\ \(\(message\)\(.\)\)\
*) \[IndentingNewLine]If[\(! MemberQ[$ContextPath, "\<LinKnots`\>"]\), \
\[IndentingNewLine]Message[InstallLinKnots::failed, 
            symbol]; \[IndentingNewLine]False, \
\[IndentingNewLine]LinKnotDirectory[] = 
            DirectoryName[
              File /. Flatten[\(FileInformation[
                        ToFileName[#, "\<LinKnots.m\>"]] &\) /@ $Path]]; \
\[IndentingNewLine] (*Now\ clean\ up\ the\ $ContextPath\ again, \ 
            removing\ as\ much\ as\ \(\(possible\)\(.\)\)\
*) \[IndentingNewLine]$ContextPath = 
            oldContextPath; \[IndentingNewLine]True\[IndentingNewLine]]\
\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(GaussCode[HoldPattern[ConwayNotation[ss_String]]] := 
      Module[{}, \[IndentingNewLine]If[
          InstallLinKnots[
            ConwayNotation], \[IndentingNewLine]\((GaussCode[
                HoldPattern[ConwayNotation[ss0_String]]] := 
              fContoKTGauss[
                ss0])\); \[IndentingNewLine]CreditMessage["\<Conway notation \
(and pdata) to Gauss code conversion was written by Radmila Sazdanovic in \
2003-2006.\>"]; \[IndentingNewLine]GaussCode[
            ConwayNotation[
              ss]], \[IndentingNewLine]$Failed\[IndentingNewLine]]\
\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    RowBox[{"(*", 
      RowBox[{\(\(**\)\(**\)\), "*", 
        StyleBox["red",
          FontColor->RGBColor[1, 0, 0]], 
        StyleBox[" ",
          FontColor->RGBColor[1, 0, 0]], 
        StyleBox["are",
          FontColor->RGBColor[1, 0, 0]], " ", "functions", " ", "from", " ", 
        "LinKnot"}], "*********)"}]], "Input"],

Cell[BoxData[
    RowBox[{\(KnDowToKTGauss[Ul_List]\), ":=", 
      RowBox[{"Module", "[", 
        RowBox[{\({ss, gg, sc, i}\), ",", "\[IndentingNewLine]", 
          RowBox[{
            RowBox[{"ss", "=", 
              RowBox[{
                RowBox[{
                  StyleBox[
                    RowBox[{"LinKnots`", 
                      StyleBox["fSignsKL",
                        FontColor->RGBColor[1, 0, 0]]}]], "[", \(Abs[Ul]\), 
                  "]"}], "[", \([2]\), "]"}]}], ";", 
            "\[IndentingNewLine]", \(gg = 
              Map[Sort, 
                Table[{2  i - 1, Abs[Ul[\([2, i]\)]]}, {i, 
                    Length[Ul[\([2]\)]]}]]\), ";", 
            "\[IndentingNewLine]", \(sc = 
              Flatten[Complement[
                  Table[If[ss[\([i]\)] < 0, gg[\([i]\)], {}], {i, 
                      Length[ss]}], {{}}]]\), ";", 
            "\[IndentingNewLine]", \(gg = 
              Map[Last, 
                Sort[Flatten[
                    Table[{{gg[\([i, 1]\)], i}, {gg[\([i, 2]\)], i}}, {i, 
                        Length[gg]}], 1]]]\), ";", 
            "\[IndentingNewLine]", \(gg = 
              Table[gg[\([i]\)]*\((\(-1\))\)^i, {i, Length[gg]}]\), ";", 
            "\[IndentingNewLine]", \(gg = 
              Table[If[MemberQ[sc, i], \(-gg[\([i]\)]\), gg[\([i]\)]], {i, 
                  Length[gg]}]\), ";", 
            "\[IndentingNewLine]", \(GaussCode @@ 
              If[Length[Ul[\([1]\)]] \[Equal] 1, gg, 
                iteratedTake[gg, 2  Ul[\([1]\)]]]\)}]}], 
        "\[IndentingNewLine]", "]"}]}]], "Input",
  InitializationCell->True],

Cell[BoxData[{
    RowBox[{
      RowBox[{\(DowkerToKTGauss[Ul_List]\), ":=", 
        RowBox[{"Module", "[", 
          RowBox[{\({ss, ss1, i}\), ",", 
            RowBox[{
              RowBox[{"ss", "=", 
                RowBox[{
                  StyleBox[
                    RowBox[{"LinKnots`", 
                      StyleBox["fSignsKL",
                        FontColor->RGBColor[1, 0, 0]]}]], "[", \(Abs[Ul]\), 
                  "]"}]}], ";", 
              "\[IndentingNewLine]", \(ss1 = 
                Map[Sign, Ul[\([2]\)]]*Map[Sign, ss[\([2]\)]]\), ";", 
              "\[IndentingNewLine]", \(ss = 
                KnDowToKTGauss[{Ul[\([1]\)], ss1*Ul[\([2]\)]}]\)}]}], "]"}]}],
       "\n", \( (*Pdata\ to\ Knot\ theory\ GaussCode*) \)}], "\
\[IndentingNewLine]", 
    RowBox[{\(PdataToKTGauss[Ul_List]\), ":=", 
      RowBox[{"Module", "[", 
        RowBox[{\({}\), ",", "\[IndentingNewLine]", 
          
          RowBox[{\(CreditMessage["\<Conway notation (and pdata) to Gauss \
code conversion was written by Radmila Sazdanovic in 2003-2006.\>"]\), ";", 
            "\[IndentingNewLine]", 
            RowBox[{"DowkerToKTGauss", "[", 
              RowBox[{
                StyleBox[
                  RowBox[{"LinKnots`", 
                    StyleBox["fDowfromPD",
                      FontColor->RGBColor[1, 0, 0]]}]], "[", "Ul", "]"}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
  InitializationCell->True],

Cell[BoxData[
    RowBox[{\( (*DT\ to\ Pdata\ via\ KnotscapeDow = PD*) \), " ", 
      "\[IndentingNewLine]", 
      RowBox[{
        RowBox[{\(DTtoPData[HoldPattern[DTCode[d__List]]]\), ":=", 
          RowBox[{
            StyleBox[
              RowBox[{"LinKnots`", 
                StyleBox["fPDataFromDow",
                  FontColor->RGBColor[1, 0, 0]]}]], 
            "[", \({Length /@ {d}, Join[d]}\), "]"}]}], "\[IndentingNewLine]",
         
        RowBox[{\(DTtoPData[HoldPattern[DTCode[n__Integer]]]\), ":=", 
          RowBox[{
            StyleBox[
              RowBox[{"LinKnots`", 
                StyleBox["fPDataFromDow",
                  FontColor->RGBColor[1, 0, 0]]}]], 
            "[", \({{Length[{n}]}, {n}}\), "]"}]}]}]}]], "Input",
  InitializationCell->True],

Cell[BoxData[
    RowBox[{\(KnotInput[]\), ":=", 
      RowBox[{"Module", "[", 
        RowBox[{\({pdata}\), ",", "\[IndentingNewLine]", 
          
          RowBox[{\(InstallLinKnots[KnotInput]\), ";", 
            "\[IndentingNewLine]", \(CreditMessage["\<Graphical knot input \
was written by Ochiai and Imafuji.\>"]\), ";", "\[IndentingNewLine]", 
            RowBox[{"SwitchDirectories", "[", 
              RowBox[{"PdataToKTGauss", "[", 
                RowBox[{
                  StyleBox[
                    RowBox[{"KnotsByComputer`", 
                      StyleBox["GetPdatabyTracking",
                        FontColor->RGBColor[1, 0, 0]]}]], "[", "]"}], "]"}], 
              "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
  InitializationCell->True],

Cell[BoxData[
    RowBox[{
      RowBox[{\(DrawKnot[k_]\), ":=", 
        RowBox[{"Module", "[", 
          RowBox[{\({pdata}\), ",", "\[IndentingNewLine]", 
            
            RowBox[{\(InstallLinKnots[DrawKnot]\), ";", 
              "\[IndentingNewLine]", \(CreditMessage["\<Graphical knot output \
was written by ???.\>"]\), ";", "\[IndentingNewLine]", 
              RowBox[{"SwitchDirectories", "[", "\[IndentingNewLine]", 
                
                RowBox[{\(pdata = DTtoPData[DTCode[k]]\), ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{
                    StyleBox[
                      RowBox[{"KnotsByComputer`", 
                        StyleBox["ShowKnotfromPdata",
                          FontColor->RGBColor[1, 0, 0]]}]], "[", "pdata", 
                    "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
          "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}]], "Input",
  InitializationCell->True],

Cell[CellGroupData[{

Cell["EndPackage", "Subsection",
  InitializationCell->True],

Cell[BoxData[
    \(End[]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(EndPackage[]\)], "Input",
  InitializationCell->True]
}, Open  ]]
}, Open  ]]
},
FrontEndVersion->"5.2 for Microsoft Windows",
ScreenRectangle->{{0, 1024}, {0, 685}},
AutoGeneratedPackage->Automatic,
WindowSize->{1016, 651},
WindowMargins->{{7, Automatic}, {Automatic, 0}}
]

(*******************************************************************
Cached data follows.  If you edit this Notebook file directly, not
using Mathematica, you must remove the line containing CacheID at
the top of  the file.  The cache data will then be recreated when
you save this file from within Mathematica.
*******************************************************************)

(*CellTagsOutline
CellTagsIndex->{}
*)

(*CellTagsIndex
CellTagsIndex->{}
*)

(*NotebookFileOutline
Notebook[{

Cell[CellGroupData[{
Cell[1776, 53, 70, 1, 73, "Section",
  InitializationCell->True],
Cell[1849, 56, 339, 8, 71, "Text",
  InitializationCell->True],
Cell[2191, 66, 97, 2, 30, "Input",
  InitializationCell->True],
Cell[2291, 70, 304, 5, 70, "Input",
  InitializationCell->True],
Cell[2598, 77, 220, 4, 70, "Input",
  InitializationCell->True],
Cell[2821, 83, 298, 5, 70, "Input",
  InitializationCell->True],
Cell[3122, 90, 87, 2, 30, "Input",
  InitializationCell->True],
Cell[3212, 94, 748, 14, 190, "Input",
  InitializationCell->True],
<<<<<<< .mine
Cell[3963, 110, 567, 10, 150, "Input",
=======
Cell[4164, 114, 843, 17, 190, "Input",
>>>>>>> .r96
  InitializationCell->True],
<<<<<<< .mine
Cell[4533, 122, 601, 11, 150, "Input",
=======
Cell[5010, 133, 103, 2, 30, "Input",
>>>>>>> .r96
  InitializationCell->True],
<<<<<<< .mine
Cell[5137, 135, 145, 3, 30, "Input",
=======
Cell[5116, 137, 343, 5, 70, "Input",
>>>>>>> .r96
  InitializationCell->True],
<<<<<<< .mine
Cell[5285, 140, 862, 20, 70, "Input",
=======
Cell[5462, 144, 1032, 20, 270, "Input",
>>>>>>> .r96
  InitializationCell->True],
<<<<<<< .mine
Cell[6150, 162, 421, 8, 70, "Input",
=======
Cell[6497, 166, 625, 13, 170, "Input",
>>>>>>> .r96
  InitializationCell->True],
<<<<<<< .mine
Cell[6574, 172, 910, 18, 270, "Input",
=======
Cell[7125, 181, 349, 9, 30, "Input"],
Cell[7477, 192, 1618, 35, 190, "Input",
>>>>>>> .r96
  InitializationCell->True],
<<<<<<< .mine
Cell[7487, 192, 103, 2, 30, "Input",
=======
Cell[9098, 229, 1462, 33, 170, "Input",
>>>>>>> .r96
  InitializationCell->True],
<<<<<<< .mine
Cell[7593, 196, 343, 5, 90, "Input",
=======
Cell[10563, 264, 765, 19, 70, "Input",
>>>>>>> .r96
  InitializationCell->True],
<<<<<<< .mine
Cell[7939, 203, 1032, 20, 270, "Input",
=======
Cell[11331, 285, 846, 18, 130, "Input",
>>>>>>> .r96
  InitializationCell->True],
Cell[8974, 225, 651, 13, 170, "Input",
  InitializationCell->True],
Cell[9628, 240, 349, 9, 30, "Input"],
Cell[9980, 251, 1618, 35, 190, "Input",
  InitializationCell->True],
Cell[11601, 288, 1462, 33, 170, "Input",
  InitializationCell->True],
Cell[13066, 323, 791, 19, 70, "Input",
  InitializationCell->True],
Cell[13860, 344, 773, 16, 110, "Input",
  InitializationCell->True],
Cell[14636, 362, 964, 20, 190, "Input",
  InitializationCell->True],

Cell[CellGroupData[{
<<<<<<< .mine
Cell[15625, 386, 60, 1, 38, "Subsection",
=======
Cell[12202, 307, 60, 1, 38, "Subsection",
>>>>>>> .r96
  InitializationCell->True],
<<<<<<< .mine
Cell[15688, 389, 66, 2, 30, "Input",
=======
Cell[12265, 310, 66, 2, 30, "Input",
>>>>>>> .r96
  InitializationCell->True],
<<<<<<< .mine
Cell[15757, 393, 73, 2, 30, "Input",
=======
Cell[12334, 314, 73, 2, 30, "Input",
>>>>>>> .r96
  InitializationCell->True]
}, Open  ]]
}, Open  ]]
}
]
*)



(*******************************************************************
End of Mathematica Notebook file.
*******************************************************************)

